#:include "blis-macros.fypp"

#:def addv(name,ctype,ckind)
  subroutine ${BLIS_HEAD(name,"(conjx,n,x,incx,y,incy)")}$
    import :: conj_t, dim_t, inc_t, ${ckind}$
    integer, parameter :: wp = ${ckind}$
    integer(conj_t), value :: conjx
    integer(dim_t), value :: n
    ${ctype}$, intent(in) :: x(*)
    integer(inc_t), value :: incx
    ${ctype}$, intent(inout) :: y(*)
    integer(inc_t), value :: incy
  end subroutine
#:enddef

#:def amaxv(name,ctype,ckind)
  subroutine ${BLIS_HEAD(name,"(n,x,incx,index)")}$
    import :: dim_t, inc_t, ${ckind}$
    integer(dim_t), value :: n
    ${ctype}$, intent(in) :: x(*)
    integer(inc_t), value :: incx
    integer(dim_t), intent(out) :: index
  end subroutine
#:enddef

#:def axpyv(name,ctype,ckind)
  subroutine ${BLIS_HEAD(name,"(conjx,n,alpha,x,incx,y,incy)")}$
    import :: conj_t, dim_t, inc_t, ${ckind}$
    integer(conj_t), value :: conjx
    integer(dim_t), value :: n
    ${ctype}$, intent(in) :: alpha
    ${ctype}$, intent(in) :: x(*)
    integer(inc_t), value :: incx
    ${ctype}$, intent(inout) :: y(*)
    integer(inc_t), value :: incy
  end subroutine
#:enddef

#:def axpbyv(name,ctype,ckind)
  subroutine ${BLIS_HEAD(name,"(conjx,n,alpha,x,incx,beta,y,incy)")}$
    import :: conj_t, dim_t, inc_t, ${ckind}$
    integer(conj_t), value :: conjx
    integer(dim_t), value :: n
    ${ctype}$, intent(in) :: alpha
    ${ctype}$, intent(in) :: x(*)
    integer(inc_t), value :: incx
    ${ctype}$, intent(in) :: beta
    ${ctype}$, intent(inout) :: y(*)
    integer(inc_t), value :: incy
  end subroutine
#:enddef

#:def copyv(name,ctype,ckind)
  subroutine ${BLIS_HEAD(name,"(conjx,n,x,incx,y,incy)")}$
    import :: conj_t, dim_t, inc_t, ${ckind}$
    integer(conj_t), value :: conjx
    integer(dim_t), value :: n
    ${ctype}$, intent(in) :: x(*)
    integer(inc_t), value :: incx
    ${ctype}$, intent(inout) :: y(*)
    integer(inc_t), value :: incy
  end subroutine
#:enddef

#:def dotv(name,ctype,ckind)
  subroutine ${BLIS_HEAD(name,"(conjx,conjy,n,x,incx,y,incy,rho)")}$
    import :: conj_t, dim_t, inc_t, ${ckind}$
    integer(conj_t), value :: conjx
    integer(conj_t), value :: conjy
    integer(dim_t), value :: n
    ${ctype}$, intent(in) :: x(*)
    integer(inc_t), value :: incx
    ${ctype}$, intent(in) :: y(*)
    integer(inc_t), value :: incy
    ${ctype}$, intent(out) :: rho
  end subroutine
#:enddef

#:def dotxv(name,ctype,ckind)
  subroutine ${BLIS_HEAD(name,"(conjx,conjy,n,x,incx,y,incy,rho)")}$
    import :: conj_t, dim_t, inc_t, ${ckind}$
    integer(conj_t), value :: conjx
    integer(conj_t), value :: conjy
    integer(dim_t), value :: n
    ${ctype}$, intent(in) :: x(*)
    integer(inc_t), value :: incx
    ${ctype}$, intent(in) :: y(*)
    integer(inc_t), value :: incy
    ${ctype}$, intent(in) :: beta
    ${ctype}$, intent(inout) :: rho
  end subroutine
#:enddef

#:def invertv(name,ctype,ckind)
  subroutine ${BLIS_HEAD(name,"(n,x,incx)")}$
    import :: dim_t, inc_t, ${ckind}$
    integer(dim_t), value :: n
    ${ctype}$, intent(inout) :: x(*)
    integer(inc_t), value :: incx
  end subroutine
#:enddef

#:def scalv(name,ctype,ckind)
  subroutine ${BLIS_HEAD(name,"(conjx,n,alpha,x,incx)")}$
    import :: conj_t, dim_t, inc_t, ${ckind}$
    integer(conj_t), value :: conjalpha
    integer(dim_t), value :: n
    ${ctype}$, intent(in) :: alpha
    ${ctype}$, intent(inout) :: x(*)
    integer(inc_t), value :: incx
  end subroutine
#:enddef

#:def scal2v(name,ctype,ckind)
  subroutine ${BLIS_HEAD(name,"(conjx,n,alpha,x,incx,y,incy)")}$
    import :: conj_t, dim_t, inc_t, ${ckind}$
    integer(conj_t), value :: conjx
    integer(dim_t), value :: n
    ${ctype}$, intent(in) :: alpha
    ${ctype}$, intent(in) :: x(*)
    integer(inc_t), value :: incx
    ${ctype}$, intent(inout) :: y(*)
    integer(inc_t), value :: incy
  end subroutine
#:enddef

#:def setv(name,ctype,ckind)
  subroutine ${BLIS_HEAD(name,"(conjalpha,n,alpha,x,incx)")}$
    import :: conj_t, dim_t, inc_t, ${ckind}$
    integer(conj_t), value :: conjalpha
    integer(dim_t), value :: n
    ${ctype}$, intent(in) :: alpha
    ${ctype}$, intent(out) :: x(*)
    integer(inc_t), value :: incx
  end subroutine
#:enddef

#:def subv(name,ctype,ckind)
  subroutine ${BLIS_HEAD(name,"(conjx,n,x,incx,y,incy)")}$
    import :: conj_t, dim_t, inc_t, ${ckind}$
    integer(conj_t), value :: conjx
    integer(dim_t), value :: n
    ${ctype}$, intent(in) :: x(*)
    integer(inc_t), value :: incx
    ${ctype}$, intent(inout) :: y(*)
    integer(inc_t), value :: incy
  end subroutine
#:enddef

#:def swapv(name,ctype,ckind)
  subroutine ${BLIS_HEAD(name,"(n,x,incx,y,incy)")}$
    import :: conj_t, dim_t, inc_t, ${ckind}$
    integer(conj_t), value :: conjx
    integer(dim_t), value :: n
    ${ctype}$, intent(inout) :: x(*)
    integer(inc_t), value :: incx
    ${ctype}$, intent(inout) :: y(*)
    integer(inc_t), value :: incy
  end subroutine
#:enddef

#:def xpbyv(name,ctype,ckind)
  subroutine ${BLIS_HEAD(name,"(conjx,n,x,incx,beta,y,incy)")}$
    import :: conj_t, dim_t, inc_t, ${ckind}$
    integer(conj_t), value :: conjx
    integer(dim_t), value :: n
    ${ctype}$, intent(in) :: x(*)
    integer(inc_t), value :: incx
    ${ctype}$, intent(in) :: beta
    ${ctype}$, intent(inout) :: y(*)
    integer(inc_t), value :: incy
  end subroutine
#:enddef



!
! -- Level-1v --
!
$:BLIS_INTERFACE('?addv',chars,addv)
$:BLIS_INTERFACE('?amaxv',chars,amaxv)
$:BLIS_INTERFACE('?axpyv',chars,axpyv)
$:BLIS_INTERFACE('?axpbyv',chars,axpbyv)
$:BLIS_INTERFACE('?copyv',chars,copyv)
$:BLIS_INTERFACE('?dotv',chars,dotv)
$:BLIS_INTERFACE('?dotxv',chars,dotxv)
$:BLIS_INTERFACE('?invertv',chars,invertv)
$:BLIS_INTERFACE('?scalv',chars,scalv)
$:BLIS_INTERFACE('?scal2v',chars,scal2v)
$:BLIS_INTERFACE('?setv',chars,setv)
$:BLIS_INTERFACE('?subv',chars,subv)
$:BLIS_INTERFACE('?swapv',chars,swapv)
$:BLIS_INTERFACE('?xpbyv',chars,xpbyv)
